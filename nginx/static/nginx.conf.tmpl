# /etc/nginx/nginx.conf

#daemon off;

#user nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
#error_log /var/log/nginx/error.log warn;
error_log /dev/stderr;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

# Include files with config snippets into the root context.
include /etc/nginx/conf.d/*.conf;

events {
	# The maximum number of simultaneous connections that can be opened by
	# a worker process.
	worker_connections 1024;
}

http {
	# Includes mapping of file name extensions to MIME types of responses
	# and defines the default type.
	default_type application/octet-stream;

	# Name servers used to resolve names of upstream servers into addresses.
	# It's also needed when using tcpsocket and udpsocket in Lua modules.
	resolver {{ vault "kv/home/ips/ns1" "ip" }};

	# Don't tell nginx version to the clients. Default is 'on'.
	server_tokens off;

	# Specifies the maximum accepted body size of a client request, as
	# indicated by the request header Content-Length. If the stated content
	# length is greater than this size, then the client receives the HTTP
	# error code 413. Set to 0 to disable. Default is '1m'.
	client_max_body_size 1m;

	# Sendfile copies data between one FD and other from within the kernel,
	# which is more efficient than read() + write(). Default is off.
	sendfile on;

	# Causes nginx to attempt to send its HTTP response head in one packet,
	# instead of using partial frames. Default is 'off'.
	tcp_nopush on;


	# Enables the specified protocols. Default is TLSv1 TLSv1.1 TLSv1.2.
	# TIP: If you're not obligated to support ancient clients, remove TLSv1.1.
	ssl_protocols TLSv1.2 TLSv1.3;

	# Path of the file with Diffie-Hellman parameters for EDH ciphers.
	# TIP: Generate with: `openssl dhparam -out /etc/ssl/nginx/dh2048.pem 2048`
	#ssl_dhparam /etc/ssl/nginx/dh2048.pem;

	# Specifies that our cipher suits should be preferred over client ciphers.
	# Default is 'off'.
	ssl_prefer_server_ciphers on;

	# Enables a shared SSL cache with size that can hold around 8000 sessions.
	# Default is 'none'.
	ssl_session_cache shared:SSL:2m;

	# Specifies a time during which a client may reuse the session parameters.
	# Default is '5m'.
	ssl_session_timeout 1h;

	# Disable TLS session tickets (they are insecure). Default is 'on'.
	ssl_session_tickets off;


	# Enable gzipping of responses.
	gzip on;

	# Set the Vary HTTP header as defined in the RFC 2616. Default is 'off'.
	gzip_vary on;


	# Helper variable for proxying websockets.
	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}


	# Specifies the main log format.
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for"';

	# Sets the path, format, and configuration for a buffered log write.
	#access_log /var/log/nginx/access.log main;
   	access_log /dev/stdout;


	# Includes virtual hosts configs.
	include /etc/nginx/http.d/*.conf;

  server {
	  listen 80 ssl;
	  listen [::]:80 ssl;
    server_name grafana.{{ vault "kv/domains/pub1" "full" }};
    ssl_certificate /etc/certs/grafana/cert.pem;
    ssl_certificate_key /etc/certs/grafana/cert.key;

    proxy_ssl_verify on;
    proxy_ssl_trusted_certificate /etc/certs/roots/homearpa.crt;
    proxy_ssl_session_reuse on;
    location / {
      proxy_pass https://grafana.home.arpa:{{ vault "kv/home/port/grafana" "num" }};
    }
  }

  server {
	  listen 443 ssl;
	  listen [::]:443 ssl;
    server_name grafana.{{ vault "kv/domains/pub1" "full" }};
    ssl_certificate /etc/certs/grafana/cert.pem;
    ssl_certificate_key /etc/certs/grafana/cert.key;

    proxy_ssl_verify on;
    proxy_ssl_trusted_certificate /etc/certs/roots/homearpa.crt;
    proxy_ssl_session_reuse on;
    location / {
      proxy_pass https://grafana.home.arpa:{{ vault "kv/home/port/grafana" "num" }};
    }
  }

  server {
	  listen 80 ssl;
	  listen [::]:80 ssl;
    server_name minio.{{ vault "kv/domains/pub1" "full" }};
    ssl_certificate /etc/certs/minio/fullchain.pem;
    ssl_certificate_key /etc/certs/minio/privkey.pem;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-NginX-Proxy true;

    # This is necessary to pass the correct IP to be hashed
    real_ip_header X-Real-IP;

    # enable websockets
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    proxy_ssl_verify on;
    proxy_ssl_trusted_certificate /etc/certs/roots/homearpa.crt;
    proxy_ssl_session_reuse on;
    location / {
      proxy_pass https://minio.home.arpa:{{ vault "kv/home/port/minio" "console" }};
    }
  }

  server {
	  listen 443 ssl;
	  listen [::]:443 ssl;
    server_name minio.{{ vault "kv/domains/pub1" "full" }};
    ssl_certificate /etc/certs/minio/fullchain.pem;
    ssl_certificate_key /etc/certs/minio/privkey.pem;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-NginX-Proxy true;

    # This is necessary to pass the correct IP to be hashed
    real_ip_header X-Real-IP;

    # enable websockets
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    proxy_ssl_verify on;
    proxy_ssl_trusted_certificate /etc/certs/roots/homearpa.crt;
    proxy_ssl_session_reuse on;
    location / {
      proxy_pass https://minio.home.arpa:{{ vault "kv/home/port/minio" "console" }};
    }
  }

  server {
	  listen 80 ssl;
	  listen [::]:80 ssl;
    server_name vault.{{ vault "kv/domains/pub1" "full" }};
    ssl_certificate /etc/certs/vault/fullchain.pem;
    ssl_certificate_key /etc/certs/vault/privkey.pem;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-NginX-Proxy true;

    # This is necessary to pass the correct IP to be hashed
    real_ip_header X-Real-IP;

    # enable websockets
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    proxy_ssl_verify on;
    proxy_ssl_trusted_certificate /etc/certs/roots/homearpa.crt;
    proxy_ssl_session_reuse on;
    location / {
      proxy_pass https://vault.home.arpa:{{ vault "kv/home/port/vault" "num" }};
    }
  }

  server {
	  listen 443 ssl;
	  listen [::]:443 ssl;
    server_name vault.{{ vault "kv/domains/pub1" "full" }};
    ssl_certificate /etc/certs/vault/fullchain.pem;
    ssl_certificate_key /etc/certs/vault/privkey.pem;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-NginX-Proxy true;

    # This is necessary to pass the correct IP to be hashed
    real_ip_header X-Real-IP;

    # enable websockets
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    proxy_ssl_verify on;
    proxy_ssl_trusted_certificate /etc/certs/roots/homearpa.crt;
    proxy_ssl_session_reuse on;
    location / {
      proxy_pass https://vault.home.arpa:{{ vault "kv/home/port/vault" "num" }};
    }
  }
}

## Proxy attempts made to contact the ca server to vault's ca and crl endpoints
#stream {
#  server {
#	  listen 443 default_server;
#	  listen [::]:443 default_server;
#    server_name grafana.{{ vault "kv/domains/pub1" "full" }};
#    proxy_pass grafana.{{ vault "kv/domains/pub1" "full" }}:{{ vault "kv/home/port/grafana" "num" }};
#  }
#}
